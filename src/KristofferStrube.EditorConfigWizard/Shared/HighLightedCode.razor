@using System.Text
@inject IJSRuntime JSRuntime

@if (OnClick is not null)
{ 
    <button @onclick="InvokeAction" class="@commonClasses @hoverClasses">
        <pre>
            <code @ref="@codeBlock" class="@Language" style="border-radius:5px;font-size:18px;">
                @Code.Trim()
            </code>
        </pre>
    </button>
}
else
{
    <pre class="@commonClasses">
        <code @ref="@codeBlock" class="@Language" style="border-radius:5px;font-size:18px;">
            @Code.Trim()
        </code>
    </pre>
}

@code {
    private ElementReference codeBlock;

    private string commonClasses = "text-start";

    private string? hoverClasses;

    [Parameter, EditorRequired]
    public string Code { get; set; } = "";

    [Parameter, EditorRequired]
    public string Language { get; set; } = "";

    [Parameter]
    public Color? BorderHoverColor { get; set; }

    [Parameter]
    public Color? BorderColor { get; set; }

    [Parameter]
    public Func<Task>? OnClick { get; set; }

    protected override void OnParametersSet()
    {
        var hasHover = BorderHoverColor is not null || BorderColor is not null;

        if (hasHover)
        {
            var sb = new StringBuilder();

            if (BorderHoverColor is not null)
            {
                sb.Append($"{BorderHoverColor.Value.ToString().ToLower()}-hover ");
            }
            if (BorderColor is not null)
            {
                sb.Append($"{BorderColor.Value.ToString().ToLower()} ");
            }

            sb.Append("hasHover");
            hoverClasses = sb.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JSRuntime.InvokeVoidAsync("hljs.highlightElement", codeBlock);
    }

    async Task InvokeAction()
    {
        if (OnClick is null) return;
        await OnClick();
    }
}