@using System.Text
@inject IJSRuntime JSRuntime

<pre @onclick="InvokeAction" class="@preClass" style="cursor: @cursor">
    <code @ref="@codeBlock" class="@Language" style="border-radius:5px;font-size:18px;">
        @Code.Trim()
    </code>
</pre>

@code {
    private ElementReference codeBlock;
    private string? preClass;
    private string cursor = "";

    [Parameter, EditorRequired]
    public string Code { get; set; } = "";

    [Parameter, EditorRequired]
    public string Language { get; set; } = "";

    [Parameter]
    public Color? BorderHoverColor { get; set; }

    [Parameter]
    public Color? BorderColor { get; set; }

    [Parameter]
    public Func<Task>? OnClick { get; set; }

    protected override void OnParametersSet()
    {
        cursor = OnClick is not null ? "pointer" : "default";

        var hasHover = BorderHoverColor is not null || BorderColor is not null;

        if (hasHover)
        {
            var sb = new StringBuilder();

            if (BorderHoverColor is not null)
            {
                sb.Append($"{BorderHoverColor.Value.ToString().ToLower()}-hover ");
            }
            if (BorderColor is not null)
            {
                sb.Append($"{BorderColor.Value.ToString().ToLower()} ");
            }

            sb.Append("hasHover");
            preClass = sb.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JSRuntime.InvokeVoidAsync("hljs.highlightElement", codeBlock);
    }

    async Task InvokeAction()
    {
        if (OnClick is null) return;
        await OnClick();
    }
}