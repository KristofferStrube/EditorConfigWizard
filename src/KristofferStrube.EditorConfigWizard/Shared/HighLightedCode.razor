@inject IJSRuntime JSRuntime

<pre @onclick="InvokeAction" class="@colorClass @hoverClass" style="border-radius:13px;margin:8px;"><code @ref=codeBlock class="@Language" style="border-radius:5px;font-size:20px;">
        @Code.Trim()
</code></pre>

@code {
    private ElementReference codeBlock;
    private string hoverClass = "";
    private string colorClass = "";

    [Parameter, EditorRequired]
    public string Code { get; set; } = "";

    [Parameter, EditorRequired]
    public string Language { get; set; } = "";

    [Parameter]
    public Color? BorderHoverColor { get; set; }

    [Parameter]
    public Color? BorderColor { get; set; }

    [Parameter]
    public Func<Task>? OnClick { get; set; }

    protected override void OnParametersSet()
    {
        hoverClass = BorderHoverColor is null ? "" : $"{BorderHoverColor.ToString().ToLower()}-hover";
        colorClass = BorderColor is null ? "" : $"{BorderColor.ToString().ToLower()}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JSRuntime.InvokeVoidAsync("hljs.highlightElement", codeBlock);

    }

    async Task InvokeAction()
    {
        if (OnClick is null) return;
        await OnClick();
    }
}